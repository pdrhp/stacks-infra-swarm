version: "3.8"

networks:
  observability_network:
    driver: overlay
    attachable: true
  web_network:
    external: true

volumes:
  prometheus_data:
  loki_data:
  tempo_data:

services:
  prometheus:
    image: prom/prometheus:v3.3.0
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/alert-rules:/etc/prometheus/alert-rules
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=14d"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-remote-write-receiver"
    user: "0"
    depends_on:
      - tempo
      - loki
      - node-exporter
      - cadvisor
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - observability_network
      - web_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  loki:
    image: grafana/loki:3.4.3
    volumes:
      - ./config/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    networks:
      - observability_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  tempo:
    image: grafana/tempo:2.7.2
    volumes:
      - ./config/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml
      - tempo_data:/var/tempo
    command: -config.file=/etc/tempo/tempo-config.yaml
    user: "0"
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    networks:
      - observability_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  node-exporter:
    image: prom/node-exporter:v1.9.1
    command:
      - "--path.rootfs=/host"
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    networks:
      - observability_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - observability_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command:
      - "--docker_only=true"
      - "--housekeeping_interval=30s"
